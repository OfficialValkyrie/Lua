--[[
Tested in:
Luau (Roblox)
Lua 5.2
Lua 5.3
Lua 5.4

If you use Lua +5.2 the function: newproxy is not there anymore, it was removed in Lua 5.2, it was implemented in Lua 5.1, that is why there is a remake of it in lua.

Explanation:

((a == nil) and "nil") -- Checks if 'a' is nil, returns "nil" if it's nil.

((s and e ~= nil) and "Instance") -- Checks if a.Archivable and the check for if it's a: function, table or thread returned nil. It then checks if 'e' is not nil, 'e' is error or the message it returned, 'e' should return true, since it checks for Archivable and if it's a: function, table or thread. (Archivable is a boolean, if I used ClassName it would return "string" for an Instance.)

((a == newproxy(true)) and "userdata") -- Checks if 'a' is similar to a new proxy.

(string.match(tostring(a), "^(.-):")) -- Checks if it's a: function, table or thread.

(((a == true) and "boolean" or (a == false) and "boolean")) -- Checks if a is directly true or false (I know that this is a bad check)

(((tonumber(a) ~= nil and tostring(a) ~= nil) and "number")) -- Checks if tonumber is possible on 'a' and tostring is possible too.

(((not tonumber(a)) and "string")) -- Checks if tonumber is not possible on 'a'.

("Unknown") -- This might never be returned, since most stuff will return a string.
--]]

local proxy = {}
newproxy = newproxy or function(bool)
    if bool then
		setmetatable(proxy, {
			__index = {}
		})
	end
    return proxy
end

function CheckType(a)
	local s, e = pcall(function()
		return a.Archivable and (string.match(tostring(a), "^(.-):") == nil)
	end)
	return ((a == nil) and "nil") or ((s and e ~= nil) and "Instance") or ((a == newproxy(true)) and "userdata") or (string.match(tostring(a), "^(.-):")) or (((a == true) and "boolean" or (a == false) and "boolean")) or (((tonumber(a) ~= nil and tostring(a) ~= nil) and "number")) or (((not tonumber(a)) and "string")) or ("Unknown")
end

function Function() end 
local Table = {}
local Thread = coroutine and coroutine.create and coroutine.create(function() end)
local Userdata = newproxy and newproxy(true)
local Boolean = true
local Number = 1
local String = "Hello World!"
local NewInstance = Instance and Instance.new and Instance.new("Part")

print(CheckType(NewInstance)) -- Output: Instance

print(CheckType(Function)) -- Output: function

print(CheckType(Table)) -- Output: table

print(CheckType(Thread)) -- Output: thread

print(CheckType(Userdata)) -- Output: userdata

print(CheckType(Boolean)) -- Output: boolean

print(CheckType(Number)) -- Output: number

print(CheckType(String)) -- Output: string
